Basic Installation
==================


The native build system for libpqxx is based on `configure` and `make`,
but there is also a CMake build.


Native build
------------

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README.md' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

 1. `cd' to the directory containing the package's source code and type
    `./configure' to configure the package for your system.  If you're
    using `csh' on an old version of System V, you might need to type
    `sh ./configure' instead to prevent `csh' from trying to execute
    `configure' itself.  Running `configure' takes awhile.  While
    running, it prints some messages telling which features it is
    checking for.
 2. Type `make' to compile the package.  (Add e.g. `-j8` to run up to 8
    simultanerous compiler processes to speed this up.)
 3. Optionally, type `make check' to run any self-tests that come with
    the package.
 4. Type `make install' to install the programs and any data files and
    documentation.
 5. You can remove the program binaries and object files from the
    source code directory by typing `make clean'.  To also remove the
    files that `configure' created (so you can compile the package for
    a different kind of computer), type `make distclean'.  There is
    also a `make maintainer-clean' target, but that is intended mainly
    for the package's developers.  If you use it, you may have to get
    all sorts of other programs in order to regenerate files that came
    with the distribution.


CMake build
-----------

With CMake you can generate a build setup in your choice of build
system.  The one I'm most familiar with is `make`, but people tell me that
`ninja` is much faster.  And if you're working with Visual Studio, you may need
to generate project files.

Like the native build, the CMake build needs the libpq library and headers
installed.  But in addition, it also needs the `pg_type.h` header installed.
On some systems this will be in one of the `postgresql-server-dev-*` packages.

That extra header is just to allow CMake to detect that you have a PostgreSQL
development setup installed.  The build shouldn't actually need the file
otherwise, so if you can't find the file, it may be enough to create an empty
file in the right place.

The CMake build works like:
 1. Go into the directory where you would like to build the library and
    its intermediate files.  You can do this in the source directory if you
    like, but the cleaner option is to do it in a separate location.
 2. To generate the build configuration, enter `cmake <sourcedir>`, where
    `<sourcedir>` is the location of the libpqxx source code.  You can also
    specify the type of build you want: `-G Ninja` will make CMake produce a
    Ninja build file, or `-G 'Unix Makefiles'` will make it create Makefiles.
 3. Compile the package.  This depends on what build you chose to generate:
    it might be a matter of running `make`, or of running `ninja`, or something
    else.


Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment, or by
adding them to the `configure` command line:

     ./configure CXX='clang++' CXXFLAGS=-O3 LIBS=-lposix


Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.


Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.
