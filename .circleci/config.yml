# CircleCI config for automated test builds triggered from Github.
---
version: 2.1

jobs:
  test-debian:
    parameters:
      cxx:
        type: string
      cxx_version:
        type: string
    docker:
      - image: debian:stable
    # The resource_class feature allows configuring CPU and RAM resources for
    # each job.  Different resource classes are available for different
    # executors.
    # https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
    environment:
      - PGHOST: "/tmp"
      - PGDATA: "/db"
    steps:
      - checkout
      - run:
          name: Retrieve package lists
          command: apt-get update
      - run:
          name: Install
          command: DEBIAN_FRONTEND=noninteractive TZ=UTC apt-get install -y
            lsb-release python3 postgresql libpq-dev postgresql-server-dev-all
            build-essential autoconf autoconf-archive automake cppcheck clang
            shellcheck libtool pipx yamllint
      - run:
          # Really annoying: there's no uv package right now.  So we install
          # pipx just in order to use that to install uv.
          name: Install uv
          command: pipx install uv
      - run:
          name: Identify
          command: nproc && lsb_release -a && c++ --version && clang++ --version
      - run:
          name: Autogen
          command: ./autogen.sh
      - run:
          name: Configure
          command: |
            ./configure \
                --enable-maintainer-mode \
                --enable-audit \
                --enable-shared --disable-static \
                CXXFLAGS='-O1 -std=<< parameters.cxx_version >>' \
                CXX=<< parameters.cxx >>
      - store_artifacts:
          path: config.log
      - run:
          name: Make
          command: make -j4
      - run:
          name: Prepare postgres
          command: |
            mkdir -p $PGDATA &&
            chown postgres $PGDATA &&
            su postgres -c "/usr/lib/postgresql/*/bin/initdb --pgdata \
              $PGDATA --auth trust --nosync"
      - run:
          name: Run postgres
          # TODO: Is there a good way to wait for startup to complete?
          command: >+
            (
            su postgres -c
            "/usr/lib/postgresql/*/bin/postgres -D $PGDATA -k $PGHOST"
            &) &&
            sleep 5
      - run:
          name: Create postgres user
          command: su postgres -c "createuser -w -d root"
      - run:
          name: Set up database
          command: createdb --template=template0 --encoding=UNICODE root
      - run:
          name: Test
          command: PATH="$PATH:$HOME/.local/bin" PGDATA=db/data make -j4 check
      - store_artifacts:
          path: test-suite.log

  test-arch:
    parameters:
      cxx:
        type: string
      cxx_version:
        type: string
    docker:
      - image: archlinux
    resource_class: large
    environment:
      - PGHOST: "/tmp"
      - PGDATA: "/var/lib/postgres/data"
    steps:
      - checkout
      - run:
          name: Retrieve package lists
          command: pacman -Sy
      - run:
          name: Install
          command: pacman --noconfirm --quiet -S
            clang cmake diffutils python3 autoconf autoconf-archive automake
            cppcheck diffutils libtool make postgresql postgresql-libs
            shellcheck uv yamllint
      - run:
          name: Identify
          command: nproc && c++ --version && clang++ --version
      - run:
          name: Autogen
          command: ./autogen.sh
      - run:
          name: Echo Configure
          command: >
            echo ./configure
                --enable-maintainer-mode
                --enable-audit
                --enable-shared --disable-static
                CXX=<< parameters.cxx >>
                CXXFLAGS=\"-O1 -std=<< parameters.cxx_version >>\"
       - run:
          name: Configure
          command: >
            ./configure
                --enable-maintainer-mode
                --enable-audit
                --enable-shared --disable-static
                CXX=<< parameters.cxx >>
                CXXFLAGS="-O1 -std=<< parameters.cxx_version >>"
      - store_artifacts:
          path: config.log
      - run:
          name: Make
          command: make -j4
      - run:
          name: Prepare postgres
          command: "su postgres -c \
            \"initdb --pgdata $PGDATA --auth trust --nosync\""
      - run:
          name: Run postgres
          # TODO: Is there a good way to wait for startup to complete?
          command: >+
            (
            su postgres -c
            "postgres -D $PGDATA -k $PGHOST"
            &) &&
            sleep 5
      - run:
          name: Create postgres user
          command: su postgres -c "createuser -w -d root"
      - run:
          name: Set up database
          command: createdb --template=template0 --encoding=UNICODE root
      - run:
          name: Test
          command: PATH="$PATH:$HOME/.local/bin" PGDATA=db/data make -j4 check
      - store_artifacts:
          path: test-suite.log

  analyse:
    parameters:
      cxx_version:
        type: string
    docker:
      - image: debian:stable
    resource_class: large
    steps:
      - checkout
      - run:
          name: Configure apt archives
          command: apt-get update &&
            DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
      - run:
          name: Install
          command: DEBIAN_FRONTEND=noninteractive TZ=UTC apt-get install -y
            python3 build-essential cppcheck clang clang-tidy cmake libpq-dev
            shellcheck postgresql-server-dev-all markdownlint yamllint pipx
      - run:
          name: Install uv
          command: pipx install uv
      - run:
          name: Prepare
          command: SRC="$(pwd)" &&
            mkdir -p /tmp/pqxx &&
            cd /tmp/pqxx &&
            CXX=clang++ CXXFLAGS='-O0
              -std=<< parameters.cxx_version >>' cmake "$SRC"
      - run:
          name: Analyse
          command: SRC="$(pwd)" &&
            cd /tmp/pqxx &&
            PATH="$PATH:$HOME/.local/bin" "$SRC/tools/lint" --full

workflows:
  all-tests:
    jobs:
      - test-debian:
          matrix:
            parameters:
              cxx: ["clang++", "g++"]
              cxx_version: ["c++20", "c++23", "c++26"]
      - test-arch:
          matrix:
            parameters:
              cxx: ["clang++", "g++"]
              cxx_version: ["c++20", "c++23", "c++26"]
      - analyse:
          matrix:
            parameters:
              # Running this for 3 C++ versions took too long for CircleCI.
              cxx_version: ["c++26"]
