---
format:
  _help_max_prefix_chars:
    - !!python/unicode 'If the statement spelling length (including space and'
    - !!python/unicode 'parenthesis) is larger than the tab width by more '
    - !!python/unicode 'than this, then force reject un-nested layouts.'
  max_prefix_chars: 10
  _help_dangle_align:
    - !!python/unicode 'If trailing parenthesis must be ''dangled'' on its own'
    - !!python/unicode 'line, then align it to this reference: `prefix`: the '
    - !!python/unicode 'start of the statement,  `prefix-indent`: the start of '
    - !!python/unicode 'the statement plus one indentation  level, `child`: '
    - !!python/unicode 'align to the column of the arguments'
  dangle_align: !!python/unicode 'prefix'
  _help_max_subgroups_hwrap:
    - !!python/unicode 'If an argument group contains more than this many '
    - !!python/unicode 'sub-groups (parg or kwarg groups) then force it to a '
    - !!python/unicode 'vertical layout.'
  max_subgroups_hwrap: 2
  _help_min_prefix_chars:
    - !!python/unicode 'If the statement spelling length (including space and'
    - !!python/unicode 'parenthesis) is less than this, then force reject'
    - !!python/unicode 'nested layouts.'
  min_prefix_chars: 4
  _help_max_pargs_hwrap:
    - !!python/unicode 'If a positional argument group contains more than this'
    - !!python/unicode 'many arguments, then force it to a vertical layout.'
  max_pargs_hwrap: 6
  _help_max_lines_hwrap:
    - !!python/unicode 'If a candidate layout is wrapped horizontally but '
    - !!python/unicode 'exceeds this many lines, then reject the layout.'
  max_lines_hwrap: 2
  _help_autosort:
    - !!python/unicode 'If true, the parsers may infer whether or not an '
    - !!python/unicode 'argument list is sortable (without annotation).'
  autosort: false
  _help_line_ending:
    - !!python/unicode 'What style line endings to use in the output.'
  line_ending: !!python/unicode 'unix'
  _help_line_width:
    - !!python/unicode 'How wide to allow formatted cmake files'
  line_width: 80
  _help_dangle_parens:
    - !!python/unicode 'If a statement is wrapped to more than one line, then '
    - !!python/unicode 'dangle the closing parenthesis on its own line.'
  dangle_parens: true
  _help_tab_size:
    - !!python/unicode 'How many spaces to tab for indent'
  tab_size: 4
  _help_always_wrap:
    - !!python/unicode 'A list of command names which should always be wrapped'
  always_wrap: []
  _help_require_valid_layout:
    - !!python/unicode 'By default, if cmake-format cannot successfully fit'
    - !!python/unicode 'everything into the desired linewidth it will apply '
    - !!python/unicode 'the last, most agressive attempt that it made. If '
    - !!python/unicode 'this flag is True, however, cmake-format will print '
    - !!python/unicode 'error, exit with non-zero status code, and write-out '
    - !!python/unicode 'nothing'
  require_valid_layout: true
  _help_keyword_case:
    - !!python/unicode 'Format keywords consistently as ''lower'' or '
    - !!python/unicode ' ''upper'' case'
  keyword_case: !!python/unicode 'unchanged'
  _help_layout_passes:
    - !!python/unicode 'A dictionary mapping layout nodes to a list of wrap'
    - !!python/unicode 'decisions. See the documentation for more information.'
  layout_passes: {}
  _help_enable_sort:
    - !!python/unicode 'If true, the argument lists which are known to be '
    - !!python/unicode 'sortable will be sorted lexicographically'
  enable_sort: true
_help_markup: !!python/unicode 'Options affecting comment reflow & formatting.'
markup:
  _help_literal_comment_pattern:
    - !!python/unicode 'If comment markup is enabled, don''t reflow any '
    - !!python/unicode 'comment block which matches this regex.  Default is '
    - !!python/unicode '`None` (disabled).'
  literal_comment_pattern: null
  _help_hashruler_min_length:
    - !!python/unicode 'If a comment line starts with at least this many '
    - !!python/unicode 'consecutive hash characters, then don''t lstrip() '
    - !!python/unicode 'them off.  This allows for lazy hash rulers where the '
    - !!python/unicode 'first hash char is not separated by space'
  hashruler_min_length: 10
  _help_fence_pattern:
    - !!python/unicode 'Regex to match preformat fences in comments'
    - !!python/unicode 'default=r''^\s*([`~]{3}[`~]*)(.*)$'''
  fence_pattern: !!python/unicode '^\s*([`~]{3}[`~]*)(.*)$'
  _help_canonicalize_hashrulers:
    - !!python/unicode 'If true, insert a space between first hash char and'
    - !!python/unicode 'remaining hash chars in a hash ruler, and normalize its'
    - !!python/unicode 'length to fill the column'
  canonicalize_hashrulers: true
  _help_explicit_trailing_pattern:
    - !!python/unicode 'If a comment line matches starts with this pattern '
    - !!python/unicode 'then it is explicitly a trailing comment for the '
    - !!python/unicode 'preceding argument. Default is ''#<'''
  explicit_trailing_pattern: !!python/unicode '#<'
  _help_first_comment_is_literal:
    - !!python/unicode 'If comment markup is enabled, don''t reflow first '
    - !!python/unicode 'comment block in each listfile. Use to preserve '
    - !!python/unicode 'formatting of your copyright/license statements.'
  first_comment_is_literal: false
  _help_enable_markup:
    - !!python/unicode 'enable comment markup parsing and reflow'
  enable_markup: true
  _help_ruler_pattern:
    - !!python/unicode 'Regular expression to match rulers in comments'
    - !!python/unicode 'default=r''^\s*[^\w\s]{3}.*[^\w\s]{3}$'''
  ruler_pattern: !!python/unicode '^\s*[^\w\s]{3}.*[^\w\s]{3}$'
  _help_enum_char:
    - !!python/unicode 'punctuation character after numerals in an'
    - !!python/unicode 'enumerated list'
  enum_char: .
  _help_bullet_char:
    - !!python/unicode 'What character to use for bulleted lists'
  bullet_char: '*'
_help_lint: !!python/unicode 'Options affecting the linter'
lint:
  _help_function_pattern:
    - !!python/unicode 'regex describing valid function names'
  function_pattern: !!python/unicode '[0-9a-z_]+'
  _help_disabled_codes:
    - !!python/unicode 'a list of lint codes to disable'
  disabled_codes: []
  _help_min_statement_spacing:
    - !!python/unicode 'Require at least this many newlines between statements'
  min_statement_spacing: 1
  _help_macro_pattern:
    - !!python/unicode 'regular expression pattern describing valid macro names'
  macro_pattern: !!python/unicode '[0-9A-Z_]+'
  _help_public_var_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'publicdirectory variables'
  public_var_pattern: !!python/unicode '[0-9A-Z][0-9A-Z_]+'
  max_statements: 50
  _help_max_conditionals_custom_parser:
    - !!python/unicode 'In heuristic for C0201, how many conditionals to match'
    - !!python/unicode 'within a loop in before considering the loop a parser.'
  max_conditionals_custom_parser: 2
  _help_global_var_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'variables with global scope'
  global_var_pattern: !!python/unicode '[0-9A-Z][0-9A-Z_]+'
  _help_keyword_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'keywords used in functions or macros'
  keyword_pattern: !!python/unicode '[0-9A-Z_]+'
  max_arguments: 5
  _help_private_var_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'privatedirectory variables'
  private_var_pattern: !!python/unicode '_[0-9a-z_]+'
  max_localvars: 15
  max_branches: 12
  _help_local_var_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'variables with local scope'
  local_var_pattern: !!python/unicode '[0-9a-z_]+'
  _help_max_statement_spacing:
    - !!python/unicode 'Maximum newlines between statements'
  max_statement_spacing: 1
  _help_internal_var_pattern:
    - !!python/unicode 'regular expression pattern describing valid names for'
    - !!python/unicode 'variables with global scope (but internal semantic)'
  internal_var_pattern: !!python/unicode '_[0-9A-Z][0-9A-Z_]+'
  max_returns: 6
_help_misc: !!python/unicode 'Miscellaneous configurations options.'
misc:
  _help_per_command:
    - !!python/unicode 'A dictionary containing any per-command configuration'
    - !!python/unicode 'overrides. Currently only `command_case` is supported.'
  per_command: {}
_help_parse: !!python/unicode 'Options affecting listfile parsing'
parse:
  _help_additional_commands:
    - !!python/unicode 'Specify structure for custom cmake functions'
  additional_commands:
    !!python/unicode 'foo':
      !!python/unicode 'flags':
        - !!python/unicode 'BAR'
        - !!python/unicode 'BAZ'
      !!python/unicode 'kwargs':
        !!python/unicode 'HEADERS': !!python/unicode '*'
        !!python/unicode 'DEPENDS': !!python/unicode '*'
        !!python/unicode 'SOURCES': !!python/unicode '*'
_help_encode: !!python/unicode 'Options effecting file encoding'
